name: Terraform Deploy

on:
  repository_dispatch:
    types: [bootstrap_completed]

jobs:
  terraform:
    runs-on: [self-hosted, linux, x64]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      

      - name: Verify Project Directory
        run: |
          echo "📂 Project directory: ${{ github.event.client_payload.repo_path }}"
          ls -la ${{ github.event.client_payload.repo_path }}

      - name: Verify AWS Credentials
        run: |
          echo "🔍 AWS identity:"
          aws sts get-caller-identity
          echo "🔍 Checking EKS access..."
          if aws eks list-clusters --region ${{ secrets.AWS_DEFAULT_REGION }} >/dev/null 2>&1; then
            echo "✅ EKS permissions validated"
          else
            echo "⚠️ EKS list failed - may need additional permissions"
          fi

      - name: Initialize Terraform Backend
        working-directory: ${{ github.event.client_payload.repo_path }}
        run: |
          echo "🚀 Initializing Terraform..."
          terraform init -backend-config="backend-config/${{ github.event.client_payload.environment }}.tfbackend"
          terraform workspace select ${{ github.event.client_payload.environment }}

      - name: Terraform Validate
        working-directory: ${{ github.event.client_payload.repo_path }}
        run: |
          echo "🔍 Validating Terraform configuration..."
          terraform validate

      - name: Terraform Plan
        working-directory: ${{ github.event.client_payload.repo_path }}
        run: |
          echo "📋 Running Terraform plan..."
          set +e
          terraform plan \
            -var-file="static.tfvars" \
            -var-file="envs/${{ github.event.client_payload.environment }}.tfvars" \
            -out=tfplan.out \
            -detailed-exitcode
          PLAN_EXIT_CODE=$?
          set -e

          case $PLAN_EXIT_CODE in
            0)
              echo "✅ Terraform plan: No changes needed"
              ;;
            2)
              echo "✅ Terraform plan: Changes detected"
              ;;
            1)
              echo "❌ Terraform plan failed!"
              exit 1
              ;;
            *)
              echo "❌ Unexpected terraform plan exit code: $PLAN_EXIT_CODE"
              exit 1
              ;;
          esac

      - name: Terraform Apply
        working-directory: ${{ github.event.client_payload.repo_path }}
        run: |
          echo "🚀 Applying Terraform changes..."
          export TF_LOG=DEBUG
          export TF_LOG_PATH="terraform-apply.log"

          if ! terraform apply -auto-approve -parallelism=5 tfplan.out 2>&1 | tee terraform-output.log; then
            echo "❌ Terraform apply failed!"
            tail -50 terraform-output.log
            tail -50 terraform-apply.log
            exit 1
          fi

          echo "✅ Terraform apply completed successfully!"

      - name: Output EKS Cluster Info
        working-directory: ${{ github.event.client_payload.repo_path }}
        run: |
          echo "🎉 Terraform outputs:"
          terraform output

      - name: Deployment Summary
        working-directory: ${{ github.event.client_payload.repo_path }}
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.client_payload.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workspace:** ${{ github.event.client_payload.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
