name: Terraform Deploy

on:
  repository_dispatch:
    types: [bootstrap_completed]

jobs:
  terraform:
    runs-on: [self-hosted, linux, x64]
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Verify Project Directory
        run: |
          echo "📂 Verifying project directory: ${{ github.event.client_payload.repo_path }}"
          ls -la ${{ github.event.client_payload.repo_path }}
          echo "✅ Project directory verified"

      - name: Verify AWS Credentials
        run: |
          echo "🔍 Verifying AWS credentials..."
          aws sts get-caller-identity
          echo "✅ AWS credentials validated"
          
          echo "🔍 Checking EKS permissions..."
          if aws eks list-clusters --region ${{ secrets.AWS_DEFAULT_REGION }} >/dev/null 2>&1; then
            echo "✅ EKS permissions validated"
          else
            echo "⚠️ Warning: EKS list failed - may need additional permissions"
          fi

      - name: Initialize Terraform Backend
        run: |
          echo "🚀 Re-initializing Terraform backend for CI environment..."
          
          # Check if backend config exists
          if [ ! -f "backend-config/${{ github.event.client_payload.environment }}.tfbackend" ]; then
            echo "❌ Backend config not found: backend-config/${{ github.event.client_payload.environment }}.tfbackend"
            exit 1
          fi
          
          # Check if static vars file exists
          if [ ! -f "static.tfvars" ]; then
            echo "❌ Static vars file not found: static.tfvars"
            exit 1
          fi
          
          # Check if environment vars file exists
          if [ ! -f "envs/${{ github.event.client_payload.environment }}.tfvars" ]; then
            echo "❌ Environment vars file not found: envs/${{ github.event.client_payload.environment }}.tfvars"
            exit 1
          fi
          
          echo "✅ All required files found:"
          echo "   - Backend config: backend-config/${{ github.event.client_payload.environment }}.tfbackend"
          echo "   - Static vars: static.tfvars"
          echo "   - Environment vars: envs/${{ github.event.client_payload.environment }}.tfvars"
          
          # Re-initialize terraform (needed because this is a fresh CI environment)
          terraform init -backend-config="backend-config/${{ github.event.client_payload.environment }}.tfbackend"
          
          # Select the workspace (should already exist from local setup)
          echo "📂 Selecting workspace: ${{ github.event.client_payload.environment }}"
          terraform workspace select ${{ github.event.client_payload.environment }}
        working-directory: ${{ github.event.client_payload.repo_path }}

      - name: Terraform Validate
        run: |
          echo "🔍 Validating Terraform configuration..."
          terraform validate
        working-directory: ${{ github.event.client_payload.repo_path }}

      - name: Terraform Plan
        run: |
          echo "📋 Running Terraform plan..."
          
          # Check if static.tfvars exists
          if [ ! -f "static.tfvars" ]; then
            echo "❌ Static vars file not found: static.tfvars"
            exit 1
          fi
          
          terraform plan \
            -var-file="static.tfvars" \
            -var-file="envs/${{ github.event.client_payload.environment }}.tfvars" \
            -out=tfplan.out \
            -detailed-exitcode
        working-directory: ${{ github.event.client_payload.repo_path }}

      - name: Terraform Apply
        run: |
          echo "🚀 Applying Terraform changes..."
          set -e
          
          # Enable detailed logging
          export TF_LOG=INFO
          
          # Run terraform apply with better error handling
          if ! terraform apply \
            -auto-approve \
            -parallelism=10 \
            tfplan.out; then
            echo "❌ Terraform apply failed!"
            echo "📋 Checking Terraform state..."
            terraform state list || true
            echo "📋 Last few lines of terraform log:"
            tail -50 terraform.log || true
            exit 1
          fi
          
          echo "✅ Terraform apply completed successfully!"
        working-directory: ${{ github.event.client_payload.repo_path }}
        timeout-minutes: 60

      - name: Output EKS Cluster Info
        run: |
          echo "🎉 EKS Cluster deployment completed!"
          echo "📊 Terraform outputs:"
          terraform output
        working-directory: ${{ github.event.client_payload.repo_path }}

      - name: Deployment Summary
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.client_payload.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workspace:** ${{ github.event.client_payload.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        working-directory: ${{ github.event.client_payload.repo_path }}
